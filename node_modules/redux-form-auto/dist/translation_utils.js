"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.trModel = exports.setLanguageByName = exports.createTranslatedWarningValidator = exports.createTranslatedErrorValidator = void 0;

var _translations = require("./translations");

var _translate = require("./translate");

var _utils = require("./utils");

const defLangs = {
  en: _translations.en,
  es: _translations.es
  /**
   * Fully translates objects returned by validators
   *
   * @param {object} msgs Object with errors
   *    or warnings.
   * @returns {object} Messages translated for
   *    use with ReduxForm.
   */

};

const translateMsgs = msgs => {
  const fields = Object.keys(msgs);
  const starting = Array.isArray(msgs) ? [] : {};
  return fields.reduce((obj, field) => {
    let result;
    const value = msgs[field];

    if (value) {
      if (typeof value == 'object') {
        if (value._translatable) result = (0, _translate.tr)(value.msg, value.msgData);else result = translateMsgs(value);
      } else result = value;

      obj[field] = result;
    }

    return obj;
  }, starting);
};
/**
 * Creates a validator that automatically translates
 * the messages.
 *
 * @param {validator} validator Validator
 * @returns {object}
 */


const createTranslatedValidator = validator => model => {
  const msgs = validator(model);
  return translateMsgs(msgs);
};
/**
 * Creates a validator that automatically translates
 * errors.
 *
 * @param {Schema} schema Schema instance
 * @returns {validator}
 */


const createTranslatedErrorValidator = schema => createTranslatedValidator(schema.validators.error);
/**
 * Creates a validator that automatically translates
 * warnings.
 *
 * @param {Schema} schema Schema instance
 * @returns {validator}
 */


exports.createTranslatedErrorValidator = createTranslatedErrorValidator;

const createTranslatedWarningValidator = schema => createTranslatedValidator(schema.validators.warning);
/**
 * Loads a language from the languages table.
 *
 * @param {string} name Language code as in 'en' or 'fr'.
 */


exports.createTranslatedWarningValidator = createTranslatedWarningValidator;

const setLanguageByName = name => {
  if (name in defLangs) (0, _translate.setLanguage)(defLangs[name]);
};
/**
 * Multipurpose semantic-ish translation.
 *
 * @param {string} model Object name, usually what
 *    you pass as the first parameter when you create
 *    the schema.
 * @param {string} field Field name
 * @param {string} op Thing that varies based on
 *    the type.
 */


exports.setLanguageByName = setLanguageByName;

const trModel = (model, field, op) => (0, _translate.tr)((0, _utils.trPath)(model, field, op));

exports.trModel = trModel;