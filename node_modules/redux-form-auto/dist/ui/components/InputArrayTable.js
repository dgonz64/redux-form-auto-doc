"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InputArrayTable = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = require("prop-types");

var _Panel = require("./Panel");

var _Button = require("./Button");

var _renderLectures = require("./renderLectures");

var _translate = require("../../translate");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } }

const renderCloser = ({
  fields,
  idx,
  onRemove
}) => _react.default.createElement(_Button.Button, {
  iconClass: "trash",
  onClick: onRemove.bind(null, fields, idx),
  className: "btn-danger",
  small: true
});

const addRemove = ({
  field,
  idx,
  children,
  instrumentChildren,
  onRemove,
  fields
}) => {
  const instrumented = instrumentChildren({
    field,
    idx,
    children
  });
  const closer = renderCloser({
    fields,
    idx,
    onRemove
  });
  const childrenAndClose = [closer].concat(_toConsumableArray(instrumented));
  return childrenAndClose.map((child, childIdx) => {
    const inlinedChild = (0, _react.cloneElement)(child, {
      elementOnly: true,
      inline: true
    });
    return _react.default.createElement("td", {
      key: childIdx,
      className: `form-col-${childIdx + 1}`
    }, inlinedChild);
  });
};

const renderInputs = props => {
  return props.fields.map((field, idx) => _react.default.createElement("tr", {
    key: idx
  }, addRemove(_objectSpread({}, props, {
    field,
    idx
  }))));
};

const renderTable = props => _react.default.createElement("table", {
  className: "table table-striped"
}, _react.default.createElement("tbody", null, renderInputs(props)));

const renderHeader = (onFocus, onAdd) => _react.default.createElement(_Button.Button, {
  className: "btn-success",
  onFocus: onFocus,
  onClick: onAdd,
  iconClass: "plus",
  text: (0, _translate.tr)('add'),
  small: true
});

const InputArrayTable = props => {
  const {
    onAdd,
    fields,
    newObject,
    addOnButtonFocus,
    meta
  } = props;
  const boundAdd = onAdd.bind(null, fields, newObject);
  const onFocus = addOnButtonFocus ? boundAdd : null;
  return _react.default.createElement(_Panel.Panel, {
    table: renderTable(props),
    header: renderHeader(onFocus, boundAdd)
  }, (0, _renderLectures.renderLectures)(meta));
};

exports.InputArrayTable = InputArrayTable;