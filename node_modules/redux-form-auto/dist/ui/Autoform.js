"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Autoform = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reduxForm = require("redux-form");

var _componentRender = require("./componentRender");

var _utils = require("../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

const Form = _componentRender.components.form.component;
const ConnectedForm = (0, _reduxForm.reduxForm)()(Form);
/**
 * Creates a form using the current skin. The form
 * has all the needed fields, styles and validation
 * errors needed for it to function.
 */

class Autoform extends _react.Component {
  render() {
    const _this$props = this.props,
          {
      form,
      schema,
      noErrors,
      noWarns,
      noTranslate,
      noConnect,
      formProps,
      elementProps,
      initialValues
    } = _this$props,
          rest = _objectWithoutProperties(_this$props, ["form", "schema", "noErrors", "noWarns", "noTranslate", "noConnect", "formProps", "elementProps", "initialValues"]);

    const providedForm = form || schema.getType() || 'def';
    const errorer = noErrors ? null : noTranslate ? schema.getErrorValidator() : schema.getTranslatedErrorValidator();
    const warner = noWarns ? null : noTranslate ? schema.getWarningValidator() : schema.getTranslatedWarningValidator();
    const $formComponent = noConnect ? Form : ConnectedForm;
    const mergedInitial = (0, _utils.mergeInitialValues)(initialValues, schema);
    return _react.default.createElement($formComponent, _extends({
      form: providedForm,
      validate: errorer,
      warn: warner,
      initialValues: mergedInitial
    }, rest, formProps), (0, _componentRender.renderInputs)(_objectSpread({
      schema
    }, rest, elementProps)));
  }

}

exports.Autoform = Autoform;
Autoform.propTypes = {
  /**
   * The schema used to infer the fields.
   */
  schema: _propTypes.default.object.isRequired,

  /**
   * Optional name for the form. If not provided
   * it will use Schema's name.
   */
  form: _propTypes.default.string,

  /** Disable error reports */
  noErrors: _propTypes.default.bool,

  /** Disable warning reports */
  noWarns: _propTypes.default.bool,

  /** Don't translate text */
  noTranslate: _propTypes.default.bool,

  /**
   * Don't connect form to ReduxForm. It's up
   * to you when or where you use reduxForm HoC.
   */
  noConnect: _propTypes.default.bool,

  /**
   * Called on submit with the values of the form.
   */
  onSubmit: _propTypes.default.func
};