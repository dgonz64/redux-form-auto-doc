"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InputWrap = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reduxForm = require("redux-form");

var _classnames = _interopRequireDefault(require("classnames"));

var _translation_utils = require("../../translation_utils");

var _utils = require("../../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

class InputBase extends _react.Component {
  focus() {
    this.inputControl.focus();
  }

  render() {
    const _this$props = this.props,
          {
      children,
      input,
      inputWrapper,
      inputComponent,
      required,
      config,
      config: {
        horizontal
      },
      elementOnly,
      inline,
      type,
      autoFocus,
      className,
      schemaTypeName,
      onKeyDown,
      onKeyPress,
      labelOverride,
      componentPropMap,
      meta,
      meta: {
        touched,
        error,
        warning
      }
    } = _this$props,
          rest = _objectWithoutProperties(_this$props, ["children", "input", "inputWrapper", "inputComponent", "required", "config", "config", "elementOnly", "inline", "type", "autoFocus", "className", "schemaTypeName", "onKeyDown", "onKeyPress", "labelOverride", "componentPropMap", "meta", "meta"]);

    const $wrapper = inputWrapper;
    const $input = inputComponent || 'input';
    const inputIsClass = typeof inputComponent == 'function';
    const providedRest = componentPropMap ? componentPropMap(this.props) : inputIsClass ? _objectSpread({}, rest, {
      input,
      meta,
      config,
      autoFocus,
      schemaTypeName
    }) : input;
    const noWrap = type == 'hidden' || elementOnly;
    const fieldName = (0, _utils.arrLast)(input.name.split('.'));
    const label = typeof labelOverride != 'undefined' ? labelOverride : (0, _translation_utils.trModel)(schemaTypeName, fieldName, '_field');
    const placeholder = noWrap ? label : null;
    const inputClasses = (0, _classnames.default)('form-control', className);
    return _react.default.createElement($wrapper, {
      label: label,
      required: required,
      horizontal: horizontal,
      inline: inline,
      errorMessage: touched && error,
      warningMessage: touched && warning,
      elementOnly: noWrap
    }, _react.default.createElement($input, _extends({
      className: inputClasses,
      type: type || 'text',
      onKeyDown: onKeyDown,
      onKeyPress: onKeyPress
    }, providedRest, {
      autoComplete: "off",
      placeholder: placeholder,
      ref: element => this.inputControl = element
    }), children));
  }

}

class InputWrap extends _react.Component {
  focus() {
    this.fieldElement.getRenderedComponent().focus();
  }

  render() {
    return _react.default.createElement(_reduxForm.Field, _extends({
      component: InputBase,
      ref: el => this.fieldElement = el,
      withRef: true
    }, this.props));
  }

}
/**
 * Skin input propTypes.
 * @typedef {object} InputPropTypes
 */


exports.InputWrap = InputWrap;
InputWrap.propTypes = {
  children: _propTypes.default.node,
  name: _propTypes.default.string.isRequired,
  fieldSchema: _propTypes.default.object,
  schemaTypeName: _propTypes.default.string.isRequired,
  label: _propTypes.default.string,
  inputComponent: _propTypes.default.any,
  required: _propTypes.default.bool,
  horizontal: _propTypes.default.bool,
  elementOnly: _propTypes.default.bool,
  type: _propTypes.default.string
};