"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InputArrayWrap = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reduxForm = require("redux-form");

var _utils = require("../../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

const instrumentChildren = ({
  field,
  idx,
  children
}) => {
  return children.map((child, inputIdx) => {
    const _child$props = child.props,
          {
      name
    } = _child$props,
          rest = _objectWithoutProperties(_child$props, ["name"]);

    const newName = `${field}.${name}`;
    return (0, _react.cloneElement)(child, _objectSpread({
      name: newName,
      key: inputIdx
    }, rest));
  });
};

const handleAdd = (schema, fields, newObject = {}) => {
  const useObject = (0, _utils.mergeInitialValues)(newObject, schema);
  fields.push(useObject);
};

const handleRemove = (fields, idx) => {
  fields.remove(idx);
};
/**
 * Used for the arrays in models, for
 * example clients: [Clients]
 *
 */


const InputArrayWrap = (_ref) => {
  let {
    name,
    children,
    propOverrides,
    newObject,
    arrayHandler,
    fieldSchema
  } = _ref,
      rest = _objectWithoutProperties(_ref, ["name", "children", "propOverrides", "newObject", "arrayHandler", "fieldSchema"]);

  const schema = fieldSchema.type[0];
  return _react.default.createElement(_reduxForm.FieldArray, _extends({
    name: name,
    component: arrayHandler,
    onAdd: handleAdd.bind(null, schema),
    onRemove: handleRemove,
    instrumentChildren: instrumentChildren,
    newObject: newObject
  }, rest), children);
};

exports.InputArrayWrap = InputArrayWrap;
InputArrayWrap.propTypes = {
  name: _propTypes.default.string,
  type: _propTypes.default.string,
  children: _propTypes.default.array.isRequired,
  newObject: _propTypes.default.object
};